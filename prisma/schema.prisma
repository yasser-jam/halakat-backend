generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Top-level Organization model
model Organization {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  contact_email String?
  contact_phone String?
  address       String?
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  metadata      Json?

  // Relations
  mosques    Mosque[]
  users      OrganizationUser[]
  Curriculum Curriculum[]
  Category   Category[]

  @@index([name])
}

// Second-level Mosque model
model Mosque {
  id              Int      @id @default(autoincrement())
  organization_id Int
  name            String
  city            String?
  address_area    String?
  address_details String?
  contact_phone   String?
  contact_email   String?
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  metadata        Json?

  // Relations
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  campaigns    Campaign[]

  @@index([organization_id])
  @@index([name])
}

// Organization users for managing access across organizations
model OrganizationUser {
  id              Int      @id @default(autoincrement())
  organization_id Int
  email           String
  first_name      String?
  last_name       String?
  role            OrgRole  @default(ADMIN)
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  password        String?

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, email])
  @@index([email])
}

// Global Student model - students can participate in multiple campaigns across different mosques
model Student {
  id                                  Int       @id @default(autoincrement())
  current_mosque_name                 String?
  educational_class                   Int?
  first_name                          String?
  last_name                           String?
  birth_date                          DateTime?
  student_mobile                      String    @unique // Globally unique
  school                              String?
  in_another_mosque                   Boolean   @default(false)
  other_mosque_names                  String?
  student_health_status               String?
  special_talent                      String?
  father_name                         String?
  father_status                       STATUS    @default(ALIVE)
  father_job                          String?
  father_income_level                 String?
  father_education_level              String?
  father_health_status                String?
  father_phone_number                 String?
  father_work_number                  String?
  mother_name                         String?
  mother_status                       STATUS    @default(ALIVE)
  mother_job                          String?
  mother_income_level                 String?
  mother_education_level              String?
  mother_health_status                String?
  mother_phone_number                 String?
  mother_home_number                  String?
  parent_marital_status               MARITAL   @default(MARRIED)
  student_mobile_number               String?
  student_home_number                 String?
  original_residence_address_area     String?
  original_residence_address_street   String?
  original_residence_address_building String?
  original_residence_address_floor    String?
  current_residence_address_area      String?
  current_residence_address_street    String?
  current_residence_address_building  String?
  current_residence_address_floor     String?
  preserved_parts                     String?
  parts_tested_by_the_endowments      String?
  image_url                           String?
  password                            String?
  created_at                          DateTime  @default(now())
  updated_at                          DateTime? @updatedAt

  // Relations - all through campaigns
  campaign_enrollments StudentCampaign[]
  groups               StudentGroup[]
  attendance           Attendance[]
  saving_sessions      SavingSession[]
  logs                 Log[]

  @@index([student_mobile])
  @@index([first_name, last_name])
}

// Global Teacher model - teachers can work in multiple campaigns across different mosques
model Teacher {
  id                                 Int       @id @default(autoincrement())
  educational_level                  String?
  university_name                    String?
  college_name                       String?
  first_name                         String?
  last_name                          String?
  birth_date                         DateTime?
  mobile_phone_number                String    @unique // Globally unique
  in_another_mosque                  Boolean?
  other_mosque_names                 String?
  special_talent                     String?
  father_name                        String?
  current_residence_address_area     String?
  current_residence_address_street   String?
  current_residence_address_building String?
  preserved_parts                    Json?
  parts_tested_by_the_endowments     Json?
  image_url                          String?
  is_mojaz                           Boolean?
  is_working                         Boolean?
  job_role                           String?
  workplace_name                     String?
  password                           String
  role                               Role      @default(TEACHER)
  created_at                         DateTime  @default(now())
  updated_at                         DateTime? @updatedAt

  // Relations - all through campaigns
  campaign_assignments    TeacherCampaign[]
  groups                  TeacherGroup[]
  saving_sessions         SavingSession[]
  teacher_roles           TeacherRole[]
  logs                    Log[]
  CurriculumLessonSession CurriculumLessonSession[]

  @@index([mobile_phone_number])
  @@index([first_name, last_name])
}

// Groups belong to specific mosques but are used within campaigns
model Group {
  id                 Int      @id @default(autoincrement())
  mosque_id          Int?
  title              String
  class              Int?
  current_teacher_id Int?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  // Relations
  students                StudentGroup[]
  teachers                TeacherGroup[]
  campaigns               GroupCampaigns[]
  attendance              Attendance[]
  teacher_roles           TeacherRole[]
  CurriculumLessonSession CurriculumLessonSession[]
  GroupCurriculum         GroupCurriculum[]

  @@index([mosque_id])
}

model Campaign {
  id                      Int       @id @default(autoincrement())
  mosque_id               Int
  name                    String
  start_date              DateTime  @default(now())
  end_date                DateTime?
  assign_end_date         DateTime?
  assign_start_date       DateTime? @default(now())
  is_campaign_continuous  Boolean   @default(false)
  limited_students_count  Boolean?
  students_count          Int?
  assign_by_link          Boolean?
  complete_count_approach String    @default("UNLIMIT_ASSIGN")
  days                    String?
  timing_approach         String    @default("hours")
  start_time              String?
  status                  Boolean   @default(false)
  end_time                String?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  metadata                Json?

  // Relations
  mosque                  Mosque                    @relation(fields: [mosque_id], references: [id], onDelete: Cascade)
  groups                  GroupCampaigns[]
  student_enrollments     StudentCampaign[]
  teacher_assignments     TeacherCampaign[]
  student_groups          StudentGroup[]
  attendance              Attendance[]
  saving_sessions         SavingSession[]
  mistakes                Mistake[]
  evaluations             Evaluation[]
  teacher_roles           TeacherRole[]
  TeacherGroup            TeacherGroup[]
  AppRole                 AppRole[]
  CurriculumTemplate      CurriculumTemplate[]
  CurriculumLessonSession CurriculumLessonSession[]
  GroupCurriculum         GroupCurriculum[]

  @@index([mosque_id])
  @@index([status])
}

// Junction table for students enrolled in specific campaigns
model StudentCampaign {
  student_id    Int
  campaign_id   Int
  enrolled_date DateTime @default(now())
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  student  Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@id([student_id, campaign_id])
  @@index([campaign_id])
}

// Junction table for teachers assigned to specific campaigns
model TeacherCampaign {
  teacher_id    Int
  campaign_id   Int
  assigned_date DateTime @default(now())
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  teacher  Teacher  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@id([teacher_id, campaign_id])
  @@index([campaign_id])
}

model GroupCampaigns {
  group_id    Int
  campaign_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  group    Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@id([group_id, campaign_id])
}

model StudentGroup {
  student_id  Int
  group_id    Int
  campaign_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  student  Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  group    Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@id([student_id, group_id, campaign_id])
}

model TeacherGroup {
  teacher_id  Int
  group_id    Int
  campaign_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  teacher  Teacher  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  group    Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@id([teacher_id, group_id, campaign_id])
}

model Attendance {
  id          Int      @id @default(autoincrement())
  student_id  Int
  group_id    Int
  campaign_id Int
  taken_date  DateTime @default(now())
  delay_time  Int
  status      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  student  Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  group    Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@index([student_id])
  @@index([campaign_id])
  @@index([taken_date])
}

model Evaluation {
  id            Int    @id @default(autoincrement())
  title         String
  points        Int
  minimum_marks Int
  campaign_id   Int

  campaign       Campaign        @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  sessions       SavingSession[]
  session_surahs SessionSurah[]

  @@index([campaign_id])
}

model SavingSession {
  id               Int      @id @default(autoincrement())
  teacher_id       Int
  student_id       Int
  campaign_id      Int
  evaluation_id    Int?
  start            Int // start page (for reporting)
  end              Int // end page (for reporting)
  rating           Int
  duration         Int
  totalScore       Float? // Sum of weighted scores from completed templates
  maxPossibleScore Float? // Sum of weights * 100 for completed templates only
  overallPassed    Boolean? // totalScore >= evaluation.minimum_marks
  created_at       DateTime @default(now())

  teacher        Teacher        @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  student        Student        @relation(fields: [student_id], references: [id], onDelete: Cascade)
  campaign       Campaign       @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  evaluation     Evaluation?    @relation(fields: [evaluation_id], references: [id], onDelete: Restrict)
  session_surahs SessionSurah[]

  @@index([teacher_id])
  @@index([student_id])
  @@index([campaign_id])
  @@index([created_at])
}

model SessionSurahTemplate {
  id          Int    @id @default(autoincrement())
  surahNumber Int
  surahName   String
  pageNumber  Int
  startLine   Int?
  endLine     Int?
  weight      Float // 1.0 full page, <1.0 partial

  session_surahs SessionSurah[]

  @@unique([surahNumber, pageNumber])
  @@index([surahNumber])
  @@index([pageNumber])
}

model SessionSurah {
  id                Int      @id @default(autoincrement())
  saving_session_id Int
  template_id       Int
  evaluation_id     Int
  isPassed          Boolean?
  score             Int?
  notes             String?

  rawScore      Int? // 100 - Σ(mistake.reduced_marks), min 0
  weightedScore Float? // rawScore * template.weight
  isCompleted   Boolean @default(false) // Track if template was finished

  saving_session SavingSession        @relation(fields: [saving_session_id], references: [id], onDelete: Cascade)
  template       SessionSurahTemplate @relation(fields: [template_id], references: [id], onDelete: Restrict)
  evaluation     Evaluation           @relation(fields: [evaluation_id], references: [id], onDelete: Restrict)
  mistakes       MistakeInSession[]

  @@index([saving_session_id])
  @@index([template_id])
  @@index([evaluation_id])
}

model Mistake {
  id            Int    @id @default(autoincrement())
  campaign_id   Int
  title         String
  reduced_marks Int

  campaign Campaign           @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  mistakes MistakeInSession[]

  @@index([campaign_id])
}

model MistakeInSession {
  id               Int @id @default(autoincrement())
  session_surah_id Int
  mistake_id       Int

  session_surah SessionSurah @relation(fields: [session_surah_id], references: [id], onDelete: Cascade)
  mistake       Mistake      @relation(fields: [mistake_id], references: [id], onDelete: Restrict)

  @@index([session_surah_id])
  @@index([mistake_id])
}

model AppRole {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  permissions Json
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  campaign_id Int

  campaign      Campaign      @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  teacher_roles TeacherRole[]
}

model TeacherRole {
  id          Int      @id @default(autoincrement())
  teacher_id  Int
  group_id    Int? // made optional
  campaign_id Int
  role_id     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  teacher  Teacher  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  group    Group?   @relation(fields: [group_id], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  role     AppRole  @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([teacher_id, group_id, campaign_id, role_id])
  @@index([teacher_id])
  @@index([campaign_id])
}

model Log {
  id         Int      @id @default(autoincrement())
  event      LogEvent
  timestamp  DateTime @default(now())
  teacher_id Int?
  student_id Int?
  metadata   Json?
  created_at DateTime @default(now())

  teacher Teacher? @relation(fields: [teacher_id], references: [id], onDelete: SetNull)
  student Student? @relation(fields: [student_id], references: [id], onDelete: SetNull)

  @@index([event])
  @@index([timestamp])
}

// ============================================
// CURRICULUM (Base Definition - Campaign Independent)
// ============================================

model Curriculum {
  id              Int      @id @default(autoincrement())
  organization_id Int? // NULL = global, otherwise org-specific
  name            String
  description     String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  organization Organization?        @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  categories   CurriculumCategory[]
  templates    CurriculumTemplate[] // Different implementations per campaign

  @@index([organization_id])
}

model Category {
  id              Int      @id @default(autoincrement())
  organization_id Int? // NULL = global category
  name            String
  description     String?
  color           String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  organization Organization?        @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  curricula    CurriculumCategory[]

  @@index([organization_id])
}

model CurriculumCategory {
  curriculum_id Int
  category_id   Int

  curriculum Curriculum @relation(fields: [curriculum_id], references: [id], onDelete: Cascade)
  category   Category   @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([curriculum_id, category_id])
}

// ============================================
// CURRICULUM TEMPLATE (Campaign-Specific Implementation)
// ============================================

model CurriculumTemplate {
  id            Int      @id @default(autoincrement())
  curriculum_id Int // Which curriculum this implements
  campaign_id   Int // Which campaign this is for
  name          String? // Optional override of curriculum name
  notes         String? // Campaign-specific notes
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  curriculum      Curriculum               @relation(fields: [curriculum_id], references: [id], onDelete: Cascade)
  campaign        Campaign                 @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  nodes           CurriculumTemplateNode[]
  group_curricula GroupCurriculum[]

  @@unique([curriculum_id, campaign_id]) // One implementation per curriculum per campaign
  @@index([campaign_id])
}

// Template structure with hierarchy and time estimates
model CurriculumTemplateNode {
  id                         Int      @id @default(autoincrement())
  template_id                Int
  parent_id                  Int?
  name                       String
  description                String?
  node_type                  String?
  order_index                Int
  estimated_lessons_count    Int?
  estimated_duration_minutes Int?
  
  // NEW: Lesson span and status tracking
  lesson_span                Int?     // How many lessons allocated for this node
  status                     NodeStatus @default(PLANNED)
  
  created_at                 DateTime @default(now())
  updated_at                 DateTime @updatedAt
  
  template         CurriculumTemplate      @relation(fields: [template_id], references: [id], onDelete: Cascade)
  parent           CurriculumTemplateNode? @relation("NodeHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children         CurriculumTemplateNode[] @relation("NodeHierarchy")
  lesson_sessions  CurriculumLessonSession[]
  
  @@index([template_id, parent_id])
  @@index([status])
}
// ============================================
// LESSON DELIVERY & TRACKING
// ============================================

model CurriculumLessonSession {
  id                      Int       @id @default(autoincrement())
  node_id                 Int
  group_id                Int
  teacher_id              Int
  campaign_id             Int
  session_number          Int       // NEW: Which lesson number in the span (1, 2, 3...)
  date                    DateTime?
  is_finished             Boolean   @default(false)
  duration_minutes        Int?
  notes                   String?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  
  lesson_node CurriculumTemplateNode @relation(fields: [node_id], references: [id], onDelete: Cascade)
  group       Group                  @relation(fields: [group_id], references: [id], onDelete: Cascade)
  teacher     Teacher                @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  campaign    Campaign               @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  
  @@unique([node_id, group_id, session_number]) // Prevent duplicate session numbers
  @@index([node_id, group_id])
  @@index([teacher_id, campaign_id])
  @@index([date])
}

// Link curriculum templates to groups
model GroupCurriculum {
  id              Int       @id @default(autoincrement())
  group_id        Int
  template_id     Int // Links to CurriculumTemplate
  campaign_id     Int
  assigned_date   DateTime  @default(now())
  target_end_date DateTime?
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  group    Group              @relation(fields: [group_id], references: [id], onDelete: Cascade)
  template CurriculumTemplate @relation(fields: [template_id], references: [id], onDelete: Cascade)
  campaign Campaign           @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@unique([group_id, template_id, campaign_id])
  @@index([campaign_id])
}

// Enums
enum STATUS {
  ALIVE
  DEAD
  MISSED
}

enum MARITAL {
  MARRIED
  SEPARATED
  DIVORCED
}

enum Role {
  TEACHER
  MANAGER
  ADMIN
  SUPER_ADMIN
  MANAGER_ASSISTANT
  AUDIBLE
  AUDIBLE_ASSISTANT
}

enum OrgRole {
  OWNER
  ADMIN
  MANAGER
}

enum Permission {
  STUDENT_MANAGEMENT
  TEACHER_MANAGEMENT
  ROLES_MANAGEMENT
  SAVING_SESSION_MANAGEMENT
  ATTENDANCE_MANAGEMENT
  CURRICULUM_MANAGEMENT
  SETTINGS_MANAGEMENT
  POINTS_MANAGEMENT
  AWARDS_MANAGEMENT
}

enum LogEvent {
  TEACHER_LOGIN
  STUDENT_LOGIN
  SAVING_SESSION_CREATED
  ATTENDANCE_MARKED
  MISTAKE_ASSERTED
  EVALUATION_ASSERTED
  ROLE_ASSIGNED
  CAMPAIGN_CREATED
}

enum NodeStatus {
  PLANNED       // Not started yet
  IN_PROGRESS   // Started but not completed
  COMPLETED     // Finished within span
  LATE          // Exceeded lesson_span without completion
  SKIPPED       // Intentionally skipped
  CANCELLED     // Cancelled/removed from plan
}