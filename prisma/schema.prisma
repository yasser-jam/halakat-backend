generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model student {
  id                                  Int             @id @default(autoincrement())
  current_mosque_name                 String?
  educational_class                   Int?
  first_name                          String?
  last_name                           String?
  birth_date                          DateTime?
  student_mobile                      String          @unique
  school                              String?
  in_another_mosque                   Boolean         @default(false)
  other_mosque_names                  String?
  student_health_status               String?
  special_talent                      String?
  father_name                         String?
  father_status                       STATUS          @default(ALIVE)
  father_job                          String?
  father_income_level                 String?
  father_education_level              String?
  father_health_status                String?
  father_phone_number                 String?
  father_work_number                  String?
  mother_name                         String?
  mother_status                       STATUS          @default(ALIVE)
  mother_job                          String?
  mother_income_level                 String?
  mother_education_level              String?
  mother_health_status                String?
  mother_phone_number                 String?
  mother_home_number                  String?
  parent_marital_status               MARITAL         @default(MARRIED)
  student_mobile_number               String?
  student_home_number                 String?
  original_residence_address_area     String?
  original_residence_address_street   String?
  original_residence_address_building String?
  original_residence_address_floor    String?
  current_residence_address_area      String?
  current_residence_address_street    String?
  current_residence_address_building  String?
  current_residence_address_floor     String?
  preserved_parts                     String?
  parts_tested_by_the_endowments      String?
  image_url                           String?
  password                            String?
  groups                              StudentGroup[]
  created_at                          DateTime        @default(now())
  updated_at                          DateTime?       @updatedAt
  Attendance                          Attendance[]
  SavingSession                       SavingSession[]
}

model teacher {
  id                                 Int             @id @default(autoincrement())
  educational_level                  String?
  university_name                    String?
  college_name                       String?
  first_name                         String?
  last_name                          String?
  birth_date                         DateTime?
  mobile_phone_number                String          @unique
  in_another_mosque                  Boolean?
  other_mosque_names                 String?
  special_talent                     String?
  father_name                        String?
  current_residence_address_area     String?
  current_residence_address_street   String?
  current_residence_address_building String?
  preserved_parts                    Json?
  parts_tested_by_the_endowments     Json?
  image_url                          String?
  is_mojaz                           Boolean?
  is_working                         Boolean?
  job_role                           String?
  workplace_name                     String?
  groups                             TeacherGroup[]
  password                           String
  role                               Role            @default(TEACHER)
  created_at                         DateTime        @default(now())
  updated_at                         DateTime?       @updatedAt
  SavingSession                      SavingSession[]
  teacherRoles                       TeacherRole[]
}

model Group {
  id               Int              @id @default(autoincrement())
  title            String
  class            Int?
  currentTeacherId Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  students         StudentGroup[]
  teachers         TeacherGroup[]
  campaigns        GroupCampaigns[]
  Attendance       Attendance[]
  teacherRoles     TeacherRole[]
}

model Campaign {
  id                    Int              @id @default(autoincrement())
  name                  String
  startDate             DateTime         @default(now())
  endDate               DateTime?
  assignEndDate         DateTime?
  assignStartDate       DateTime?        @default(now())
  isCampaignContinous   Boolean          @default(false)
  limitedStudentsCount  Boolean?
  studentsCount         Int?
  assignByLink          Boolean?
  completeCountApproach String           @default("UNLIMIT_ASSIGN")
  days                  String?
  timingApproach        String           @default("hours")
  startTime             String?
  status                Boolean          @default(false)
  endTime               String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  groups                GroupCampaigns[]
  StudentGroup          StudentGroup[]
  Attendance            Attendance[]
  SavingSession         SavingSession[]
  Mistake               Mistake[]
  Evaluation            Evaluation[]
  teacherRoles          TeacherRole[]
}

model GroupCampaigns {
  groupId    Int
  campaignId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([groupId, campaignId])
}

model StudentGroup {
  studentId  Int
  groupId    Int
  campaignId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  student    student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([studentId, groupId, campaignId])
}

model TeacherGroup {
  teacherId  Int
  groupId    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  teacher    teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([teacherId, groupId])
}

model Attendance {
  id         Int      @id @default(autoincrement())
  studentId  Int
  groupId    Int
  campaignId Int
  takenDate  DateTime @default(now())
  delayTime  Int
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  student    student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Evaluation {
  id            Int             @id @default(autoincrement())
  title         String
  points        Int
  reducedAmount Int
  campaignId    Int
  campaign      Campaign        @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  sessions      SavingSession[] // reverse relation
}

model SavingSession {
  id           Int      @id @default(autoincrement())
  teacherId    Int
  studentId    Int
  campaignId   Int
  evaluationId Int? // new optional relation
  start        Int
  end          Int
  rating       Int
  duration     Int
  created_at   DateTime @default(now())

  teacher          teacher            @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student          student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  campaign         Campaign           @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  evaluation       Evaluation?        @relation(fields: [evaluationId], references: [id], onDelete: SetNull)
  MistakeInSession MistakeInSession[]

  @@index([teacherId])
  @@index([studentId])
  @@index([campaignId])
}

model Mistake {
  id             Int    @id @default(autoincrement())
  campaignId     Int
  title          String
  removed_points Int

  campaign         Campaign           @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  MistakeInSession MistakeInSession[]

  @@index([campaignId])
}

model MistakeInSession {
  id              Int @id @default(autoincrement())
  savingSessionId Int
  mistakeId       Int
  page            Int

  savingSession SavingSession @relation(fields: [savingSessionId], references: [id], onDelete: Cascade)
  mistake       Mistake       @relation(fields: [mistakeId], references: [id], onDelete: Cascade)
}

enum STATUS {
  ALIVE
  DEAD
  MISSED
}

enum MARITAL {
  MARRIED
  SEPARATED
  DIVORCED
}

enum Role {
  TEACHER
  MANAGER
  ADMIN
  SUPER_ADMIN
  MANAGER_ASSISTANT
  AUDIBLE
  AUDIBLE_ASSISTANT
}



enum Permission {
  STUDENT_MANAGEMENT
  TEACHER_MANAGEMENT
  ROLES_MANAGEMENT
  SAVING_SESSION_MANAGEMENT
  ATTENDANCE_MANAGEMENT
  CIRRUCULUM_MANAGEMENT
  SETTINGS_MANAGEMENT
  POINTS_MANAGEMENT
  AWARDS_MANAGEMENT
}

model AppRole {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  permissions Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  teacherRoles TeacherRole[]
}

model TeacherRole {
  id         Int      @id @default(autoincrement())
  teacherId  Int
  groupId    Int
  campaignId Int
  roleId     Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  teacher    teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  group      Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  role       AppRole   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([teacherId, groupId, campaignId, roleId])
}
